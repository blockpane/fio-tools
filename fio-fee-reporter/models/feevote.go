// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feevote feevote
//
// swagger:model Feevote
type Feevote struct {

	// the fee endpoint
	// Required: true
	EndPoint *string `json:"end_point"`

	// Unix timestap of when the fee vote was set
	// Required: true
	Timestamp *uint64 `json:"timestamp"`

	// the fee vote in smallest units of FIO (1,000,000,000 SUF = 1 FIO)
	// Required: true
	Value *float64 `json:"value"`
}

// Validate validates this feevote
func (m *Feevote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feevote) validateEndPoint(formats strfmt.Registry) error {

	if err := validate.Required("end_point", "body", m.EndPoint); err != nil {
		return err
	}

	return nil
}

func (m *Feevote) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *Feevote) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feevote based on context it is used
func (m *Feevote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Feevote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feevote) UnmarshalBinary(b []byte) error {
	var res Feevote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
