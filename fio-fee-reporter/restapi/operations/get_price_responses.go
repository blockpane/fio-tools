// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/blockpane/fio-tools/fio-fee-reporter/models"
)

// GetPriceOKCode is the HTTP code returned for type GetPriceOK
const GetPriceOKCode int = 200

/*GetPriceOK Price in USD averaged across exchanges based on USDT/USDC trading pairs

swagger:response getPriceOK
*/
type GetPriceOK struct {

	/*
	  In: Body
	*/
	Payload *GetPriceOKBody `json:"body,omitempty"`
}

// NewGetPriceOK creates GetPriceOK with default headers values
func NewGetPriceOK() *GetPriceOK {

	return &GetPriceOK{}
}

// WithPayload adds the payload to the get price o k response
func (o *GetPriceOK) WithPayload(payload *GetPriceOKBody) *GetPriceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get price o k response
func (o *GetPriceOK) SetPayload(payload *GetPriceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPriceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPriceServiceUnavailableCode is the HTTP code returned for type GetPriceServiceUnavailable
const GetPriceServiceUnavailableCode int = 503

/*GetPriceServiceUnavailable Data is stale, has not been updated for several minutes

swagger:response getPriceServiceUnavailable
*/
type GetPriceServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPriceServiceUnavailable creates GetPriceServiceUnavailable with default headers values
func NewGetPriceServiceUnavailable() *GetPriceServiceUnavailable {

	return &GetPriceServiceUnavailable{}
}

// WithPayload adds the payload to the get price service unavailable response
func (o *GetPriceServiceUnavailable) WithPayload(payload *models.Error) *GetPriceServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get price service unavailable response
func (o *GetPriceServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPriceServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
