// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFeeByActionNameUsdHandlerFunc turns a function with the right signature into a get fee by action name usd handler
type GetFeeByActionNameUsdHandlerFunc func(GetFeeByActionNameUsdParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFeeByActionNameUsdHandlerFunc) Handle(params GetFeeByActionNameUsdParams) middleware.Responder {
	return fn(params)
}

// GetFeeByActionNameUsdHandler interface for that can handle valid get fee by action name usd params
type GetFeeByActionNameUsdHandler interface {
	Handle(GetFeeByActionNameUsdParams) middleware.Responder
}

// NewGetFeeByActionNameUsd creates a new http.Handler for the get fee by action name usd operation
func NewGetFeeByActionNameUsd(ctx *middleware.Context, handler GetFeeByActionNameUsdHandler) *GetFeeByActionNameUsd {
	return &GetFeeByActionNameUsd{Context: ctx, Handler: handler}
}

/* GetFeeByActionNameUsd swagger:route GET /fee/byActionName/usd getFeeByActionNameUsd

List all fees in USD

*/
type GetFeeByActionNameUsd struct {
	Context *middleware.Context
	Handler GetFeeByActionNameUsdHandler
}

func (o *GetFeeByActionNameUsd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFeeByActionNameUsdParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
