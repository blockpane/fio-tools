// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/blockpane/fio-tools/fio-fee-reporter/models"
)

// GetFeeVotesFeevoteProducerOKCode is the HTTP code returned for type GetFeeVotesFeevoteProducerOK
const GetFeeVotesFeevoteProducerOKCode int = 200

/*GetFeeVotesFeevoteProducerOK The base fee in SUF used for calculating a producer's vote, before applying multiplier

swagger:response getFeeVotesFeevoteProducerOK
*/
type GetFeeVotesFeevoteProducerOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Feevote `json:"body,omitempty"`
}

// NewGetFeeVotesFeevoteProducerOK creates GetFeeVotesFeevoteProducerOK with default headers values
func NewGetFeeVotesFeevoteProducerOK() *GetFeeVotesFeevoteProducerOK {

	return &GetFeeVotesFeevoteProducerOK{}
}

// WithPayload adds the payload to the get fee votes feevote producer o k response
func (o *GetFeeVotesFeevoteProducerOK) WithPayload(payload []*models.Feevote) *GetFeeVotesFeevoteProducerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee votes feevote producer o k response
func (o *GetFeeVotesFeevoteProducerOK) SetPayload(payload []*models.Feevote) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeVotesFeevoteProducerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Feevote, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFeeVotesFeevoteProducerBadRequestCode is the HTTP code returned for type GetFeeVotesFeevoteProducerBadRequest
const GetFeeVotesFeevoteProducerBadRequestCode int = 400

/*GetFeeVotesFeevoteProducerBadRequest Invalid account format, should be a 12 character string

swagger:response getFeeVotesFeevoteProducerBadRequest
*/
type GetFeeVotesFeevoteProducerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFeeVotesFeevoteProducerBadRequest creates GetFeeVotesFeevoteProducerBadRequest with default headers values
func NewGetFeeVotesFeevoteProducerBadRequest() *GetFeeVotesFeevoteProducerBadRequest {

	return &GetFeeVotesFeevoteProducerBadRequest{}
}

// WithPayload adds the payload to the get fee votes feevote producer bad request response
func (o *GetFeeVotesFeevoteProducerBadRequest) WithPayload(payload *models.Error) *GetFeeVotesFeevoteProducerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee votes feevote producer bad request response
func (o *GetFeeVotesFeevoteProducerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeVotesFeevoteProducerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFeeVotesFeevoteProducerNotFoundCode is the HTTP code returned for type GetFeeVotesFeevoteProducerNotFound
const GetFeeVotesFeevoteProducerNotFoundCode int = 404

/*GetFeeVotesFeevoteProducerNotFound Did not find a matching producer

swagger:response getFeeVotesFeevoteProducerNotFound
*/
type GetFeeVotesFeevoteProducerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFeeVotesFeevoteProducerNotFound creates GetFeeVotesFeevoteProducerNotFound with default headers values
func NewGetFeeVotesFeevoteProducerNotFound() *GetFeeVotesFeevoteProducerNotFound {

	return &GetFeeVotesFeevoteProducerNotFound{}
}

// WithPayload adds the payload to the get fee votes feevote producer not found response
func (o *GetFeeVotesFeevoteProducerNotFound) WithPayload(payload *models.Error) *GetFeeVotesFeevoteProducerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee votes feevote producer not found response
func (o *GetFeeVotesFeevoteProducerNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeVotesFeevoteProducerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFeeVotesFeevoteProducerServiceUnavailableCode is the HTTP code returned for type GetFeeVotesFeevoteProducerServiceUnavailable
const GetFeeVotesFeevoteProducerServiceUnavailableCode int = 503

/*GetFeeVotesFeevoteProducerServiceUnavailable Data is stale, has not been updated for more than five minutes

swagger:response getFeeVotesFeevoteProducerServiceUnavailable
*/
type GetFeeVotesFeevoteProducerServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFeeVotesFeevoteProducerServiceUnavailable creates GetFeeVotesFeevoteProducerServiceUnavailable with default headers values
func NewGetFeeVotesFeevoteProducerServiceUnavailable() *GetFeeVotesFeevoteProducerServiceUnavailable {

	return &GetFeeVotesFeevoteProducerServiceUnavailable{}
}

// WithPayload adds the payload to the get fee votes feevote producer service unavailable response
func (o *GetFeeVotesFeevoteProducerServiceUnavailable) WithPayload(payload *models.Error) *GetFeeVotesFeevoteProducerServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee votes feevote producer service unavailable response
func (o *GetFeeVotesFeevoteProducerServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeVotesFeevoteProducerServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
