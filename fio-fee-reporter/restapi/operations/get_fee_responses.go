// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/blockpane/fio-tools/fio-fee-reporter/models"
)

// GetFeeOKCode is the HTTP code returned for type GetFeeOK
const GetFeeOKCode int = 200

/*GetFeeOK An array of prices for each action in FIO

swagger:response getFeeOK
*/
type GetFeeOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Price `json:"body,omitempty"`
}

// NewGetFeeOK creates GetFeeOK with default headers values
func NewGetFeeOK() *GetFeeOK {

	return &GetFeeOK{}
}

// WithPayload adds the payload to the get fee o k response
func (o *GetFeeOK) WithPayload(payload []*models.Price) *GetFeeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee o k response
func (o *GetFeeOK) SetPayload(payload []*models.Price) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Price, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFeeServiceUnavailableCode is the HTTP code returned for type GetFeeServiceUnavailable
const GetFeeServiceUnavailableCode int = 503

/*GetFeeServiceUnavailable Data is stale, has not been updated for more than five minutes

swagger:response getFeeServiceUnavailable
*/
type GetFeeServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFeeServiceUnavailable creates GetFeeServiceUnavailable with default headers values
func NewGetFeeServiceUnavailable() *GetFeeServiceUnavailable {

	return &GetFeeServiceUnavailable{}
}

// WithPayload adds the payload to the get fee service unavailable response
func (o *GetFeeServiceUnavailable) WithPayload(payload *models.Error) *GetFeeServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fee service unavailable response
func (o *GetFeeServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeeServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
